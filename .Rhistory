model_svm <- svm(stroke ~ .,
data=train_os,
cost=1,
gamma = 0.1,
kernel='sigmoid')
model_svm <- svm(stroke ~ .,
data=train_os,
cost=1,
gamma = 0.1,
kernel='sigmoid')
pred_svm <- predict(model_svm,test[1:6])
pred_svm <- predict(model_svm,test[1:5])
# move class label (stroke) back
over <- train[c(1:11)]
summary(over)
set.seed(101)
split <- sample.split(data$stroke, SplitRatio = 0.7)
train <- subset(data, split == TRUE)
test <- subset(data, split == FALSE)
# Random Over-Sampling
# move class label to 1st row on train dataset
train_moved <- train[c(11:1)]
over <- ovun.sample(stroke~., data=train_moved, method = "over", p = 0.5, seed=1)
str(over)
summary(over)
table(over$data$stroke)
str(over)
# move class label (stroke) back
over <- over[c(1:11)]
str(over)
# move class label (stroke) back
over <- over[c(11:1)]
str(over)
# Random Over-Sampling
# move class label to 1st row on train dataset
train_moved <- train[c(11:1)]
train_moved
over <- ovun.sample(stroke~., data=train_moved, method = "over", p = 0.5, seed=1)
str(over)
summary(over)
table(over$data$stroke)
# move class label (stroke) back
over <- over[c(11:1)]
str(over)
# move class label (stroke) back
over <- over[c(11:1)]
head(over)
# move class label (stroke) back
over <- over$data[c(11:1)]
str(over)
train_os <- select(over, -gender,-work_type,-Residence_type,-smoking_status, -ever_married)
model_svm <- svm(stroke ~ .,
data=train_os,
cost=1,
gamma = 0.1,
kernel='sigmoid')
pred_svm <- predict(model_svm,test[1:5])
str(train_os)
head(train_os)
pred_svm <- predict(model_svm,test[1:5])
pred_svm <- predict(model_svm,test[1:10])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
model_svm
# move class label (stroke) back
train_os <- over$data
model_svm <- svm(stroke ~ .,
data=over,
cost=1,
gamma = 0.1,
kernel='sigmoid')
pred_svm <- predict(model_svm,test[1:10])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
model_svm <- svm(stroke ~ .,
data=train_os,
cost=1,
gamma = 0.1,
kernel='sigmoid')
# move class label (stroke) back
train_os <- over$data
model_svm <- svm(stroke ~ .,
data=train_os,
cost=1,
gamma = 0.1,
kernel='sigmoid')
# Random Over-Sampling
# move class label to 1st row on train dataset
train_moved <- train[c(11:1)]
over <- ovun.sample(stroke~., data=train_moved, method = "over", p = 0.5, seed=1)
str(over)
summary(over)
table(over$data$stroke)
# move class label (stroke) back
train_os <- over$data
# move class label (stroke) back
train_os <- over$data
```{r}
# SVM
model_svm <- svm(stroke ~ ., data = train)
# SVM
model_svm <- svm(stroke ~ ., data = train)
summary(model_svm)
summary(model_svm)
pred_svm <- predict(model_svm,test[1:10])
summary(model_svm)
pred_svm <- predict(model_svm,test[1:10])
table(pred_svm,test$stroke)
model_svm <- svm(stroke ~ .,
data=train_os,
cost=1,
gamma = 0.1,
kernel='sigmoid')
model_svm <- svm(stroke ~ .,
data=train_os,
cost=1,
gamma = 0.1,
kernel='sigmoid')
pred_svm <- predict(model_svm,test[1:10])
pred_svm <- predict(model_svm,test[1:10])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
corrplot(cor, method = "color")
# corrgram
corrgram(data_num, order=TRUE,
lower.panel=panel.shade,
upper.panel=panel.pie,
text.panel=panel.txt)
set.seed(101)
split <- sample.split(data$stroke, SplitRatio = 0.7)
train <- subset(data, split == TRUE)
test <- subset(data, split == FALSE)
# Random Over-Sampling
## move class label to 1st row on train dataset
data_md <- data[c(11:1)]
# drop some not important attributes: gender, Residence_type
data_drop <- select(data, -gender, -Residence_type)
# Random Over-Sampling
## move class label to 1st row on train dataset
data_md <- data_drop[c(9:1)]
data_os <- ovun.sample(stroke~., data=data_md, method = "over", p = 0.5, seed=1)
str(over)
summary(over)
# drop not important attributes: gender, Residence_type
data_drop <- select(data, -gender, -Residence_type)
# Random Over-Sampling
## move class label to 1st row on train dataset
data_md <- data_drop[c(9:1)]
data_os <- ovun.sample(stroke~., data=data_md, method = "over", p = 0.5, seed=1)
str(data_os)
summary(data_os)
table(data_os$data$stroke)
# move class label (stroke) back
train_os <- over$data
# move class label (stroke) back
data_os <- data_os$data[c(9:1)]
# Train and test split
set.seed(101)
set.seed(101)
split <- sample.split(data_os$stroke, SplitRatio = 0.7)
train <- subset(data_os, split == TRUE)
test <- subset(data_os, split == FALSE)
model_svm <- svm(stroke ~ ., data = train)
summary(model_svm)
pred_svm <- predict(model_svm,test[1:8])
table(pred_svm,test$stroke)
model_svm <- svm(stroke ~ .,
data=train,
cost=1,
gamma = 0.1,
kernel='sigmoid')
pred_svm <- predict(model_svm,test[1:8])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
model_svm <- svm(stroke ~ .,
data=train,
cost=1,
gamma = 0.1,
kernel='linear')
pred_svm <- predict(model_svm,test[1:8])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
model_svm <- svm(stroke ~ .,
data=train,
cost=1,
gamma = 0.1,
kernel='polynomial')
model_svm <- svm(stroke ~ .,
data=train,
cost=1,
gamma = 0.1,
kernel='polynomial')
pred_svm <- predict(model_svm,test[1:8])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
model_svm <- svm(stroke ~ .,
data=train,
cost=1,
gamma = 0.1,
kernel='radial')
model_svm <- svm(stroke ~ .,
data=train,
cost=1,
gamma = 0.1,
kernel='radial')
pred_svm <- predict(model_svm,test[1:8])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
model_svm <- svm(stroke ~ .,
data=train,
cost=1,
gamma = 0.1,
kernel='sigmoid')
model_svm <- svm(stroke ~ .,
data=train,
cost=1,
gamma = 0.1,
kernel='sigmoid')
pred_svm <- predict(model_svm,test[1:8])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
model_svm <- svm(stroke ~ .,
data=train,
cost=1,
gamma = 0.1,
kernel='radial')
model_svm <- svm(stroke ~ .,
data=train,
cost=1,
gamma = 0.1,
kernel='radial')
pred_svm <- predict(model_svm,test[1:8])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
tune.results <- tune(svm, train.x= stroke ~ .,
data = train,
kernel='radial',
ranges=list(cost=c(1,10),
gamma=c(0.1,1)))
tune.results
tune.results
# set cost=10, gamma = 1
model_svm <- svm(stroke ~ .,
data=train,
cost=10,
gamma = 1,
kernel='radial')
pred_svm <- predict(model_svm,test[1:8])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
tune.results
table(pred_svm,test$stroke)
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
model_svm <- svm(stroke ~ ., data = train)
summary(model_svm)
pred_svm <- predict(model_svm, test[1:8])
table(pred_svm,test$stroke)
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive="1")
model_svm <- svm(stroke ~ .,
data = train,
cost = 10,
gamma = 1,
kernel = 'radial')
## apply the tuned SVM model on test data to predict class label (stroke)
pred_svm <- predict(model_svm,test[1:8])
confusionMatrix(pred_svm,
factor(test$stroke),
mode = "everything",
positive = "1")
# read the data
data <- read.csv("healthcare-dataset-stroke-data.csv")
# view the data
head(data)
str(data)
summary(data)
```
# read the data
data <- read.csv("healthcare-dataset-stroke-data.csv")
# view the data
head(data)
str(data)
summary(data)
# view the data
head(data)
str(data)
summary(data)
-------------------
#### <span id="3">3. Data Cleaning</span>
```{r}
# check NA values
any(is.na(data)) # it shows there are no missing value
# however there are N/A in bmi, convert them to NA values
data[data == 'N/A'] <- NA
missmap(data, col=c("yellow", "black"), legend=FALSE) # there are missing values on bmi
# plot bmi
hist(data$bmi)
boxplot(data$bmi)
# drop NA values
data <- na.omit(data)
any(is.na(data)) # check again, there is no NA value now
# drop the id column
data <- data[-1]
head(data)
# drop the id column
data <- data[-1]
head(data)
```{r}
# data transformation
str(data)
# convert character data type to factor
data <- data %>% mutate(across(where(is.character),factor))
# convert hypertension, heart_disease, stroke data type from integer to factor
data$hypertension <- as.factor(data$hypertension)
data$heart_disease <- as.factor(data$heart_disease)
data$stroke <- as.factor(data$stroke)
# binning numeric valuables
# age
ggplot(data, aes(age,y=..density..)) +
geom_histogram(binwidth=1,
color="black",
fill="#02bcfa",
alpha=0.5) +
geom_density() + labs(title="Age Distribution")
boxplot(data$age)
summary(data$age)
# binning age with quantile: 25, 44, 60, 82
data$age <- cut(data$age,
breaks = c(0, 25, 44, 60, 82),
labels=c('young', 'grown', 'mature', 'old'))
# avg glucose level
ggplot(data, aes(avg_glucose_level, y=..density..)) +
geom_histogram(color="black",
fill="#02bcfa",
alpha=0.5) +
geom_density() +
labs(title="Average Glucose Level Distribution")
boxplot(data$avg_glucose_level)
summary(data$avg_glucose_level)
# binning avg glucose level based on the information on website:
# https://my.clevelandclinic.org/health/diagnostics/12363-blood-glucose-test#:~:text=What%20is%20a%20normal%20glucose,can%20be%20%E2%80%9Cnormal%E2%80%9D%20too.
group_glucose <- function(level){
res <- level
for (i in 1:length(level)){
if (level[i] <= 70){
res[i] <- "low"
} else if (level[i] > 70 & level[i] <= 99) {
res[i] <- "normal"
} else if (level[i] > 100 & level[i] <= 125) {
res[i] <- "prediabetes"
} else {
res[i] <- "diabetes"
}
}
return(res)
}
# apply group_glucose function
data$avg_glucose_level <- group_glucose(data$avg_glucose_level)
# convert avg_glucose_level data type to factor
data$avg_glucose_level <- as.factor(data$avg_glucose_level)
# levels of data$avg_glucose_level are in the wrong order
levels(data$avg_glucose_level)
# levels of data$avg_glucose_level are in the wrong order
levels(data$avg_glucose_level)
# reorder the levels of data$avg_glucose_level
data$avg_glucose_level <- factor(data$avg_glucose_level, levels = c("low", "normal", "prediabetes", "diabetes"))
# reorder the levels of data$avg_glucose_level
data$avg_glucose_level <- factor(data$avg_glucose_level, levels = c("low", "normal", "prediabetes", "diabetes"))
# check again
levels(data$avg_glucose_level)
return(res)
# binning BMI based on the information on the CDC website:
# https://www.cdc.gov/healthyweight/assessing/index.html#:~:text=If%20your%20BMI%20is%20less,falls%20within%20the%20obese%20range.
group_bmi <- function(bmi){
res <- bmi
for (i in 1:length(bmi)){
if (bmi[i] < 18.5){
res[i] <- "underweight"
} else if (bmi[i] >= 18.5 & bmi[i] <= 24.9) {
res[i] <- "normal"
} else if (bmi[i] >= 25.0 & bmi[i] <= 29.9) {
res[i] <- "overweight"
} else {
res[i] <- "obese"
}
}
return(res)
}
# apply group_bmi function
data$bmi <- group_bmi(data$bmi)
# convert bmi data type to factor
data$bmi <- as.factor(data$bmi)
# levels of data$bmi are in the wrong order
levels(data$bmi)
# levels of data$bmi are in the wrong order
levels(data$bmi)
group_bmi <- function(bmi){
res <- bmi
for (i in 1:length(bmi)){
if (bmi[i] < 18.5){
res[i] <- "underweight"
} else if (bmi[i] >= 18.5 & bmi[i] <= 24.9) {
res[i] <- "normal"
} else if (bmi[i] >= 25.0 & bmi[i] <= 29.9) {
res[i] <- "overweight"
} else {
res[i] <- "obese"
}
}
return(res)
}
# apply group_bmi function
data$bmi <- group_bmi(data$bmi)
# apply group_bmi function
data$bmi <- group_bmi(data$bmi)
ggplot(data, aes(bmi)) +
geom_histogram(color="black",
fill="#02bcfa",
alpha=0.5) +
geom_density() + labs(title="BMI Distribution")
# binning BMI based on the information on the CDC website:
# https://www.cdc.gov/healthyweight/assessing/index.html#:~:text=If%20your%20BMI%20is%20less,falls%20within%20the%20obese%20range.
group_bmi <- function(bmi){
res <- bmi
for (i in 1:length(bmi)){
if (bmi[i] < 18.5){
res[i] <- "underweight"
} else if (bmi[i] >= 18.5 & bmi[i] <= 24.9) {
res[i] <- "normal"
} else if (bmi[i] >= 25.0 & bmi[i] <= 29.9) {
res[i] <- "overweight"
} else {
res[i] <- "obese"
}
}
return(res)
}
# apply group_bmi function
data$bmi <- group_bmi(data$bmi)
# binning BMI based on the information on the CDC website:
# https://www.cdc.gov/healthyweight/assessing/index.html#:~:text=If%20your%20BMI%20is%20less,falls%20within%20the%20obese%20range.
group_bmi <- function(bmi){
res <- bmi
for (i in 1:length(bmi)){
if (bmi[i] < 18.5){
res[i] <- "underweight"
} else if (bmi[i] >= 18.5 & bmi[i] <= 24.9) {
res[i] <- "normal"
} else if (bmi[i] >= 25.0 & bmi[i] <= 29.9) {
res[i] <- "overweight"
} else {
res[i] <- "obese"
}
}
return(res)
}
# apply group_bmi function
data$bmi <- group_bmi(data$bmi)
# read the data
data <- read.csv("healthcare-dataset-stroke-data.csv")
# binning BMI based on the information on the CDC website:
# https://www.cdc.gov/healthyweight/assessing/index.html#:~:text=If%20your%20BMI%20is%20less,falls%20within%20the%20obese%20range.
group_bmi <- function(bmi){
res <- bmi
for (i in 1:length(bmi)){
if (bmi[i] < 18.5){
res[i] <- "underweight"
} else if (bmi[i] >= 18.5 & bmi[i] <= 24.9) {
res[i] <- "normal"
} else if (bmi[i] >= 25.0 & bmi[i] <= 29.9) {
res[i] <- "overweight"
} else {
res[i] <- "obese"
}
}
return(res)
}
# apply group_bmi function
data$bmi <- group_bmi(data$bmi)
# convert bmi data type to factor
data$bmi <- as.factor(data$bmi)
# levels of data$bmi are in the wrong order
levels(data$bmi)
# reorder the levels of bmi
data$bmi <- factor(data$bmi, levels = c("underweight", "normal", "overweight", "obese"))
# check the structure
str(data)
